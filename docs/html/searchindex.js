Search.setIndex({"docnames": ["index", "source/cell_extractor", "source/lib", "source/modules"], "filenames": ["index.rst", "source/cell_extractor.rst", "source/lib.rst", "source/modules.rst"], "titles": ["Welcome to Marked Cell Detection\u2019s documentation!", "cell_extractor package", "lib package", "cell_extractor"], "terms": {"index": 0, "modul": [0, 3], "search": 0, "page": 0, "packag": 3, "submodul": 3, "celldetector": 3, "celldetectorio": [2, 3], "celldetectortrain": 3, "detectiontool": 3, "examplefind": 3, "featurefind": 3, "meanimagecalcul": 3, "compute_image_featur": 3, "util": 3, "content": 3, "lib": 3, "filelocationmanag": 3, "tiffsegmentor": 3, "utilities_process": 3, "class": [1, 2], "anim": [1, 2], "round": 1, "2": 1, "arg": [1, 2], "kwarg": [1, 2], "base": [1, 2], "detect": 1, "cell": 1, "after": 1, "exampl": 1, "featur": 1, "extract": 1, "paramet": 1, "_type_": 1, "file": [1, 2], "io": 1, "calculate_and_save_detection_result": [1, 3], "get_detection_result": [1, 3], "calcul": 1, "result": 1, "from": 1, "all": [1, 2], "section": 1, "return": [1, 2], "data": 1, "frame": 1, "conta": 1, "predict": 1, "i": [1, 2], "sure": 1, "0": 1, "unsur": 1, "type": 1, "print_vers": [1, 3], "multithresholddetector": [1, 3], "threshold": 1, "2000": 1, "2100": 1, "2200": 1, "2300": 1, "2700": 1, "annotationproximitytool": 1, "us": 1, "multipl": 1, "segment": 1, "depric": 1, "check_cel": [1, 3], "score": 1, "check_funct": 1, "determination_funct": 1, "determine_mixed_detect": [1, 3], "determine_pure_detect": [1, 3], "type_to_exclud": 1, "get_detections_and_scores_for_all_threshold": [1, 3], "get_sur": [1, 3], "get_unsur": [1, 3], "load_detect": [1, 3], "load": 1, "df": 1, "contain": 1, "plot_detector_threshold": [1, 3], "detect_cel": [1, 3], "detect_cell_multithreshold": [1, 3], "string_to_predict": [1, 3], "string": 1, "dk55": 1, "disk": 1, "net": [1, 2], "birdstor": [1, 2], "active_atlas_data": [1, 2], "1": [1, 2], "segmentation_threshold": 1, "replac": 1, "fals": [1, 2], "object": [1, 2], "calculate_average_cell_imag": [1, 3], "channel": [1, 2], "3": 1, "averag": 1, "imag": 1, "one": 1, "calulate_average_cell_imag": [1, 3], "save": 1, "subtract": 1, "check_path_exist": [1, 3], "make": 1, "path": [1, 2], "doe": 1, "exit": 1, "check_tile_inform": [1, 3], "check": 1, "size": 1, "match": 1, "inform": 1, "store": 1, "previous": 1, "create_combined_featur": [1, 3], "combin": 1, "differ": 1, "get_all_sect": [1, 3], "get": 1, "list": [1, 2], "folder": 1, "name": 1, "process": 1, "each": 1, "get_animals_with_detect": [1, 3], "get_animals_with_exampl": [1, 3], "get_animals_with_featur": [1, 3], "get_available_anim": [1, 3], "avail": 1, "_description_": 1, "get_combined_featur": [1, 3], "brain": 1, "get_combined_features_for_detect": [1, 3], "without": 1, "coordin": 1, "sampl": 1, "locat": 1, "get_combined_features_of_train_sect": [1, 3], "manual": 1, "annot": 1, "get_detection_by_categori": [1, 3], "get_example_save_path": [1, 3], "gener": 1, "step": 1, "get_feature_save_path": [1, 3], "get_manual_annotation_in_tilei": [1, 3], "tilei": 1, "get_qualif": [1, 3], "qc": 1, "get_sections_with_csv": [1, 3], "csv": 1, "about": 1, "manun": 1, "label": 1, "get_sections_with_exampl": [1, 3], "have": 1, "finish": 1, "int": 1, "option": 1, "default": 1, "get_sections_with_featur": [1, 3], "get_sections_with_str": [1, 3], "search_str": 1, "specfic": 1, "pattern": 1, "str": 1, "get_sections_without_csv": [1, 3], "get_sections_without_exampl": [1, 3], "been": 1, "through": 1, "get_sections_without_featur": [1, 3], "do": 1, "get_sections_without_str": [1, 3], "ani": 1, "get_tile_and_image_dimens": [1, 3], "pars": 1, "dimens": 1, "tile_inform": 1, "dictionari": 1, "get_tile_inform": [1, 3], "tile": 1, "pixel": 1, "get_tile_origin": [1, 3], "origin": 1, "number": 1, "x": 1, "y": 1, "np": 1, "arrai": 1, "has_detect": [1, 3], "exist": 1, "boolean": 1, "list_available_featur": [1, 3], "availbl": 1, "train": 1, "list_detector": [1, 3], "detector": [1, 3], "load_all_examples_in_brain": [1, 3], "includ": 1, "load_average_cell_imag": [1, 3], "load_detector": [1, 3], "specifi": 1, "load_exampl": [1, 3], "load_featur": [1, 3], "file_nam": 1, "specif": 1, "set": [1, 2], "load_model": [1, 3], "xgboost": 1, "model": 1, "report_detection_statu": [1, 3], "save_custom_featur": [1, 3], "custom": 1, "input": 1, "save_detector": [1, 3], "being": 1, "save_exampl": [1, 3], "save_featur": [1, 3], "save_model": [1, 3], "save_tile_inform": [1, 3], "first": 1, "directori": 1, "later": 1, "set_folder_path": [1, 3], "involv": 1, "get_all_sections_for_animali": [1, 3], "get_sections_with_annotation_for_animali": [1, 3], "get_sections_without_annotation_for_animali": [1, 3], "list_available_anim": [1, 3], "has_exampl": 1, "true": [1, 2], "has_featur": 1, "parallel_process_all_sect": [1, 3], "processing_funct": 1, "njob": 1, "10": [1, 2], "none": 1, "parallel": 1, "id": 1, "function": 1, "n": 1, "annalyz": 1, "gen_scal": [1, 3], "revers": 1, "get_train_and_test": [1, 3], "frac": 1, "5": 1, "split": 1, "test": 1, "float": 1, "init_paramet": [1, 3], "initi": 1, "current": 1, "save_predict": [1, 3], "test_xgboost": [1, 3], "depth": 1, "num_round": 1, "1000": 1, "kwrd": 1, "diagnost": 1, "rang": 1, "given": 1, "max": 1, "iter": 1, "plot": 1, "compar": 1, "comparison": 1, "dataset": 1, "tree": 1, "test_xgboost_at_depthi": [1, 3], "boost": 1, "train_classifi": [1, 3], "niter": 1, "classifi": 1, "retrain": 1, "previou": 1, "30": 1, "betterpredictor": [1, 3], "std": 1, "simpler": 1, "predictor": [1, 3], "mean": 1, "certain": 1, "mutipl": 1, "zero": 1, "decis": [1, 3], "greedypredictor": [1, 3], "parent": 1, "stro": 1, "calculate_and_set_scor": [1, 3], "thei": 1, "calculate_scor": [1, 3], "createdm": [1, 3], "creat": 1, "dm": 1, "get_predict": [1, 3], "sort": 1, "plot_decision_scatt": [1, 3], "lower_lim": 1, "upper_lim": 1, "titl": 1, "plot_score_scatt": [1, 3], "alpha1": 1, "alpha2": 1, "color1": 1, "teal": 1, "color2": 1, "orang": 1, "size1": 1, "size2": 1, "upper": 1, "lim": 1, "lower": 1, "alpha": 1, "transpar": 1, "color": 1, "set_plot_limit": [1, 3], "higher": 1, "sete": 1, "xlim": 1, "ylim": 1, "boundary_point": 1, "4": 1, "6": 1, "7": 1, "defin": 1, "dimond": 1, "region": 1, "boundari": 1, "point": 1, "abovelin": [1, 3], "p": 1, "l": 1, "plotlin": [1, 3], "b": 1, "points2lin": [1, 3], "p1": 1, "p2": 1, "print_boundary_point": [1, 3], "set_boundary_point": [1, 3], "assign": 1, "find": 1, "candid": 1, "find_cloest_connected_segment_to_manual_label": [1, 3], "manual_label": 1, "pair": 1, "automat": 1, "find_connected_seg": [1, 3], "connect": 1, "find_exampl": [1, 3], "find_segments_corresponding_to_manual_label": [1, 3], "get_exampl": [1, 3], "get_tilei": [1, 3], "fluoresc": 1, "load_and_preprocess_imag": [1, 3], "preprocess": [1, 2], "load_manual_annot": [1, 3], "load_manual_labels_in_tilei": [1, 3], "li": 1, "subtract_blurred_imag": [1, 3], "gaussian": 1, "blur": 1, "create_examples_for_all_sect": [1, 3], "create_examples_for_one_sect": [1, 3], "vector": 1, "ch1": 1, "ch3": 1, "calculate_correlation_and_energi": [1, 3], "correl": 1, "energi": 1, "calculate_featur": [1, 3], "master": [1, 2], "call": 1, "method": 1, "ar": 1, "self": 1, "copy_information_from_exampl": [1, 3], "copi": 1, "alreadi": 1, "features_using_center_connectd_compon": [1, 3], "design": 1, "create_features_for_all_sect": [1, 3], "create_features_for_one_sect": [1, 3], "background": 1, "calc_img_featur": [1, 3], "img": 1, "mean_": 1, "untrim": 1, "comput": 1, "agreement": 1, "between": 1, "gradient": 1, "thi": 1, "mean_x": 1, "mean_i": 1, "particular": 1, "img_x": 1, "img_i": 1, "equalize_array_size_by_trim": [1, 3], "array1": 1, "array2": 1, "same": 1, "sobel": [1, 3], "normal": 1, "edg": 1, "magnitud": 1, "trim_array_to_s": [1, 3], "size0": 1, "trim": 1, "an": [1, 2], "stack": 2, "data_path": 2, "data_root": 2, "pipeline_data": 2, "hous": 2, "pipelin": 2, "get_elastix": [2, 3], "get_ful": [2, 3], "get_full_align": [2, 3], "get_full_clean": [2, 3], "get_histogram": [2, 3], "get_logdir": [2, 3], "get_neuroglanc": [2, 3], "downsampl": 2, "rechunck": 2, "get_norm": [2, 3], "get_thumbnail": [2, 3], "get_thumbnail_align": [2, 3], "get_thumbnail_clean": [2, 3], "flurescence_image_input": 2, "nissel_stain_image_intput": 2, "n_worker": 2, "check_fil": [2, 3], "create_output_fold": [2, 3], "output_fold": 2, "generate_tiff_seg": [2, 3], "tif_directori": 2, "generate_tile_inform": [2, 3], "generate_til": [2, 3], "get_path_to_output_fold": [2, 3], "set_image_width_and_height": [2, 3], "set_tile_origin": [2, 3], "get_image_dimens": [2, 3], "workernoshel": [2, 3], "cmd": 2, "up": 2, "shell": 2, "command": 2, "That": 2, "what": 2, "param": 2, "line": 2, "program": 2, "argument": 2, "noth": 2}, "objects": {"": [[1, 0, 0, "-", "cell_extractor"], [2, 0, 0, "-", "lib"]], "cell_extractor": [[1, 0, 0, "-", "CellDetector"], [1, 0, 0, "-", "CellDetectorIO"], [1, 0, 0, "-", "CellDetectorTrainer"], [1, 0, 0, "-", "DetectionTool"], [1, 0, 0, "-", "ExampleFinder"], [1, 0, 0, "-", "FeatureFinder"], [1, 0, 0, "-", "MeanImageCalculator"], [1, 0, 0, "-", "compute_image_features"]], "cell_extractor.CellDetector": [[1, 1, 1, "", "CellDetector"], [1, 1, 1, "", "MultiThresholdDetector"], [1, 3, 1, "", "detect_cell"], [1, 3, 1, "", "detect_cell_multithreshold"], [1, 3, 1, "", "string_to_prediction"]], "cell_extractor.CellDetector.CellDetector": [[1, 2, 1, "", "calculate_and_save_detection_results"], [1, 2, 1, "", "get_detection_results"], [1, 2, 1, "", "print_version"]], "cell_extractor.CellDetector.MultiThresholdDetector": [[1, 2, 1, "", "calculate_and_save_detection_results"], [1, 2, 1, "", "check_cells"], [1, 2, 1, "", "determine_mixed_detection"], [1, 2, 1, "", "determine_pure_detection"], [1, 2, 1, "", "get_detections_and_scores_for_all_threshold"], [1, 2, 1, "", "get_sures"], [1, 2, 1, "", "get_unsures"], [1, 2, 1, "", "load_detections"], [1, 2, 1, "", "plot_detector_threshold"]], "cell_extractor.CellDetectorIO": [[1, 1, 1, "", "CellDetectorIO"], [1, 3, 1, "", "get_all_sections_for_animali"], [1, 3, 1, "", "get_sections_with_annotation_for_animali"], [1, 3, 1, "", "get_sections_without_annotation_for_animali"], [1, 3, 1, "", "list_available_animals"], [1, 3, 1, "", "parallel_process_all_sections"]], "cell_extractor.CellDetectorIO.CellDetectorIO": [[1, 2, 1, "", "calculate_average_cell_images"], [1, 2, 1, "", "calulate_average_cell_image"], [1, 2, 1, "", "check_path_exists"], [1, 2, 1, "", "check_tile_information"], [1, 2, 1, "", "create_combined_features"], [1, 2, 1, "", "get_all_sections"], [1, 2, 1, "", "get_animals_with_detections"], [1, 2, 1, "", "get_animals_with_examples"], [1, 2, 1, "", "get_animals_with_features"], [1, 2, 1, "", "get_available_animals"], [1, 2, 1, "", "get_combined_features"], [1, 2, 1, "", "get_combined_features_for_detection"], [1, 2, 1, "", "get_combined_features_of_train_sections"], [1, 2, 1, "", "get_detection_by_category"], [1, 2, 1, "", "get_example_save_path"], [1, 2, 1, "", "get_feature_save_path"], [1, 2, 1, "", "get_manual_annotation_in_tilei"], [1, 2, 1, "", "get_qualifications"], [1, 2, 1, "", "get_sections_with_csv"], [1, 2, 1, "", "get_sections_with_example"], [1, 2, 1, "", "get_sections_with_features"], [1, 2, 1, "", "get_sections_with_string"], [1, 2, 1, "", "get_sections_without_csv"], [1, 2, 1, "", "get_sections_without_example"], [1, 2, 1, "", "get_sections_without_features"], [1, 2, 1, "", "get_sections_without_string"], [1, 2, 1, "", "get_tile_and_image_dimensions"], [1, 2, 1, "", "get_tile_information"], [1, 2, 1, "", "get_tile_origin"], [1, 2, 1, "", "has_detection"], [1, 2, 1, "", "list_available_features"], [1, 2, 1, "", "list_detectors"], [1, 2, 1, "", "load_all_examples_in_brain"], [1, 2, 1, "", "load_average_cell_image"], [1, 2, 1, "", "load_detections"], [1, 2, 1, "", "load_detector"], [1, 2, 1, "", "load_examples"], [1, 2, 1, "", "load_features"], [1, 2, 1, "", "load_models"], [1, 2, 1, "", "report_detection_status"], [1, 2, 1, "", "save_custom_features"], [1, 2, 1, "", "save_detector"], [1, 2, 1, "", "save_examples"], [1, 2, 1, "", "save_features"], [1, 2, 1, "", "save_models"], [1, 2, 1, "", "save_tile_information"], [1, 2, 1, "", "set_folder_paths"]], "cell_extractor.CellDetectorTrainer": [[1, 1, 1, "", "CellDetectorTrainer"]], "cell_extractor.CellDetectorTrainer.CellDetectorTrainer": [[1, 2, 1, "", "gen_scale"], [1, 2, 1, "", "get_train_and_test"], [1, 2, 1, "", "init_parameter"], [1, 2, 1, "", "load_detector"], [1, 2, 1, "", "save_detector"], [1, 2, 1, "", "save_predictions"], [1, 2, 1, "", "test_xgboost"], [1, 2, 1, "", "test_xgboost_at_depthi"], [1, 2, 1, "", "train_classifier"]], "cell_extractor.DetectionTool": [[1, 1, 1, "", "BetterPredictor"], [1, 1, 1, "", "Detector"], [1, 1, 1, "", "GreedyPredictor"], [1, 1, 1, "", "Predictor"]], "cell_extractor.DetectionTool.BetterPredictor": [[1, 2, 1, "", "decision"]], "cell_extractor.DetectionTool.Detector": [[1, 2, 1, "", "calculate_and_set_scores"], [1, 2, 1, "", "calculate_scores"], [1, 2, 1, "", "createDM"], [1, 2, 1, "", "get_prediction"], [1, 2, 1, "", "plot_decision_scatter"], [1, 2, 1, "", "plot_score_scatter"], [1, 2, 1, "", "set_plot_limits"]], "cell_extractor.DetectionTool.GreedyPredictor": [[1, 2, 1, "", "aboveline"], [1, 2, 1, "", "decision"], [1, 2, 1, "", "plotline"], [1, 2, 1, "", "points2line"], [1, 2, 1, "", "print_boundary_points"], [1, 2, 1, "", "set_boundary_points"]], "cell_extractor.DetectionTool.Predictor": [[1, 2, 1, "", "decision"]], "cell_extractor.ExampleFinder": [[1, 1, 1, "", "ExampleFinder"], [1, 3, 1, "", "create_examples_for_all_sections"], [1, 3, 1, "", "create_examples_for_one_section"]], "cell_extractor.ExampleFinder.ExampleFinder": [[1, 2, 1, "", "find_cloest_connected_segment_to_manual_label"], [1, 2, 1, "", "find_connected_segments"], [1, 2, 1, "", "find_examples"], [1, 2, 1, "", "find_segments_corresponding_to_manual_labels"], [1, 2, 1, "", "get_examples"], [1, 2, 1, "", "get_tilei"], [1, 2, 1, "", "load_and_preprocess_image"], [1, 2, 1, "", "load_manual_annotation"], [1, 2, 1, "", "load_manual_labels_in_tilei"], [1, 2, 1, "", "subtract_blurred_image"]], "cell_extractor.FeatureFinder": [[1, 1, 1, "", "FeatureFinder"], [1, 3, 1, "", "create_features_for_all_sections"], [1, 3, 1, "", "create_features_for_one_section"]], "cell_extractor.FeatureFinder.FeatureFinder": [[1, 2, 1, "", "calculate_correlation_and_energy"], [1, 2, 1, "", "calculate_features"], [1, 2, 1, "", "copy_information_from_examples"], [1, 2, 1, "", "features_using_center_connectd_components"]], "cell_extractor.MeanImageCalculator": [[1, 1, 1, "", "MeanImageCalculator"]], "cell_extractor.MeanImageCalculator.MeanImageCalculator": [[1, 2, 1, "", "calculate_average_cell_images"], [1, 2, 1, "", "calulate_average_cell_image"]], "cell_extractor.compute_image_features": [[1, 3, 1, "", "calc_img_features"], [1, 3, 1, "", "equalize_array_size_by_trimming"], [1, 3, 1, "", "sobel"], [1, 3, 1, "", "trim_array_to_size"]], "lib": [[2, 0, 0, "-", "FileLocationManager"], [2, 0, 0, "-", "TiffSegmentor"], [2, 0, 0, "-", "utilities_process"]], "lib.FileLocationManager": [[2, 1, 1, "", "FileLocationManager"]], "lib.FileLocationManager.FileLocationManager": [[2, 2, 1, "", "get_elastix"], [2, 2, 1, "", "get_full"], [2, 2, 1, "", "get_full_aligned"], [2, 2, 1, "", "get_full_cleaned"], [2, 2, 1, "", "get_histogram"], [2, 2, 1, "", "get_logdir"], [2, 2, 1, "", "get_neuroglancer"], [2, 2, 1, "", "get_normalized"], [2, 2, 1, "", "get_thumbnail"], [2, 2, 1, "", "get_thumbnail_aligned"], [2, 2, 1, "", "get_thumbnail_cleaned"]], "lib.TiffSegmentor": [[2, 1, 1, "", "TiffSegmentor"]], "lib.TiffSegmentor.TiffSegmentor": [[2, 2, 1, "", "check_files"], [2, 2, 1, "", "create_output_folders"], [2, 2, 1, "", "generate_tiff_segments"], [2, 2, 1, "", "generate_tile_information"], [2, 2, 1, "", "generate_tiles"], [2, 2, 1, "", "get_path_to_output_folders"], [2, 2, 1, "", "set_image_width_and_height"], [2, 2, 1, "", "set_tile_origins"]], "lib.utilities_process": [[2, 3, 1, "", "get_image_dimension"], [2, 3, 1, "", "workernoshell"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"welcom": 0, "mark": 0, "cell": 0, "detect": 0, "": 0, "document": 0, "indic": 0, "tabl": 0, "cell_extractor": [1, 3], "packag": [1, 2], "submodul": [1, 2], "celldetector": 1, "modul": [1, 2], "celldetectorio": 1, "celldetectortrain": 1, "detectiontool": 1, "examplefind": 1, "featurefind": 1, "meanimagecalcul": 1, "compute_image_featur": 1, "util": 1, "content": [1, 2], "lib": 2, "filelocationmanag": 2, "tiffsegmentor": 2, "utilities_process": 2}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"cell_extractor": [[3, "cell-extractor"]], "Submodules": [[2, "submodules"], [1, "submodules"]], "Module contents": [[2, "module-lib"], [1, "module-cell_extractor"]], "lib package": [[2, "lib-package"]], "lib.FileLocationManager module": [[2, "module-lib.FileLocationManager"]], "lib.TiffSegmentor module": [[2, "module-lib.TiffSegmentor"]], "lib.utilities_process module": [[2, "module-lib.utilities_process"]], "Welcome to Marked Cell Detection\u2019s documentation!": [[0, "welcome-to-marked-cell-detection-s-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "cell_extractor package": [[1, "cell-extractor-package"]], "cell_extractor.CellDetector module": [[1, "module-cell_extractor.CellDetector"]], "cell_extractor.CellDetectorIO module": [[1, "module-cell_extractor.CellDetectorIO"]], "cell_extractor.CellDetectorTrainer module": [[1, "module-cell_extractor.CellDetectorTrainer"]], "cell_extractor.DetectionTool module": [[1, "module-cell_extractor.DetectionTool"]], "cell_extractor.ExampleFinder module": [[1, "module-cell_extractor.ExampleFinder"]], "cell_extractor.FeatureFinder module": [[1, "module-cell_extractor.FeatureFinder"]], "cell_extractor.MeanImageCalculator module": [[1, "module-cell_extractor.MeanImageCalculator"]], "cell_extractor.compute_image_features module": [[1, "module-cell_extractor.compute_image_features"]], "cell_extractor.utils module": [[1, "cell-extractor-utils-module"]]}, "indexentries": {"betterpredictor (class in cell_extractor.detectiontool)": [[1, "cell_extractor.DetectionTool.BetterPredictor"]], "celldetector (class in cell_extractor.celldetector)": [[1, "cell_extractor.CellDetector.CellDetector"]], "celldetectorio (class in cell_extractor.celldetectorio)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO"]], "celldetectortrainer (class in cell_extractor.celldetectortrainer)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer"]], "detector (class in cell_extractor.detectiontool)": [[1, "cell_extractor.DetectionTool.Detector"]], "examplefinder (class in cell_extractor.examplefinder)": [[1, "cell_extractor.ExampleFinder.ExampleFinder"]], "featurefinder (class in cell_extractor.featurefinder)": [[1, "cell_extractor.FeatureFinder.FeatureFinder"]], "greedypredictor (class in cell_extractor.detectiontool)": [[1, "cell_extractor.DetectionTool.GreedyPredictor"]], "meanimagecalculator (class in cell_extractor.meanimagecalculator)": [[1, "cell_extractor.MeanImageCalculator.MeanImageCalculator"]], "multithresholddetector (class in cell_extractor.celldetector)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector"]], "predictor (class in cell_extractor.detectiontool)": [[1, "cell_extractor.DetectionTool.Predictor"]], "aboveline() (cell_extractor.detectiontool.greedypredictor method)": [[1, "cell_extractor.DetectionTool.GreedyPredictor.aboveline"]], "calc_img_features() (in module cell_extractor.compute_image_features)": [[1, "cell_extractor.compute_image_features.calc_img_features"]], "calculate_and_save_detection_results() (cell_extractor.celldetector.celldetector method)": [[1, "cell_extractor.CellDetector.CellDetector.calculate_and_save_detection_results"]], "calculate_and_save_detection_results() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.calculate_and_save_detection_results"]], "calculate_and_set_scores() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.calculate_and_set_scores"]], "calculate_average_cell_images() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.calculate_average_cell_images"]], "calculate_average_cell_images() (cell_extractor.meanimagecalculator.meanimagecalculator method)": [[1, "cell_extractor.MeanImageCalculator.MeanImageCalculator.calculate_average_cell_images"]], "calculate_correlation_and_energy() (cell_extractor.featurefinder.featurefinder method)": [[1, "cell_extractor.FeatureFinder.FeatureFinder.calculate_correlation_and_energy"]], "calculate_features() (cell_extractor.featurefinder.featurefinder method)": [[1, "cell_extractor.FeatureFinder.FeatureFinder.calculate_features"]], "calculate_scores() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.calculate_scores"]], "calulate_average_cell_image() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.calulate_average_cell_image"]], "calulate_average_cell_image() (cell_extractor.meanimagecalculator.meanimagecalculator method)": [[1, "cell_extractor.MeanImageCalculator.MeanImageCalculator.calulate_average_cell_image"]], "cell_extractor": [[1, "module-cell_extractor"]], "cell_extractor.celldetector": [[1, "module-cell_extractor.CellDetector"]], "cell_extractor.celldetectorio": [[1, "module-cell_extractor.CellDetectorIO"]], "cell_extractor.celldetectortrainer": [[1, "module-cell_extractor.CellDetectorTrainer"]], "cell_extractor.detectiontool": [[1, "module-cell_extractor.DetectionTool"]], "cell_extractor.examplefinder": [[1, "module-cell_extractor.ExampleFinder"]], "cell_extractor.featurefinder": [[1, "module-cell_extractor.FeatureFinder"]], "cell_extractor.meanimagecalculator": [[1, "module-cell_extractor.MeanImageCalculator"]], "cell_extractor.compute_image_features": [[1, "module-cell_extractor.compute_image_features"]], "check_cells() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.check_cells"]], "check_path_exists() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.check_path_exists"]], "check_tile_information() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.check_tile_information"]], "copy_information_from_examples() (cell_extractor.featurefinder.featurefinder method)": [[1, "cell_extractor.FeatureFinder.FeatureFinder.copy_information_from_examples"]], "createdm() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.createDM"]], "create_combined_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.create_combined_features"]], "create_examples_for_all_sections() (in module cell_extractor.examplefinder)": [[1, "cell_extractor.ExampleFinder.create_examples_for_all_sections"]], "create_examples_for_one_section() (in module cell_extractor.examplefinder)": [[1, "cell_extractor.ExampleFinder.create_examples_for_one_section"]], "create_features_for_all_sections() (in module cell_extractor.featurefinder)": [[1, "cell_extractor.FeatureFinder.create_features_for_all_sections"]], "create_features_for_one_section() (in module cell_extractor.featurefinder)": [[1, "cell_extractor.FeatureFinder.create_features_for_one_section"]], "decision() (cell_extractor.detectiontool.betterpredictor method)": [[1, "cell_extractor.DetectionTool.BetterPredictor.decision"]], "decision() (cell_extractor.detectiontool.greedypredictor method)": [[1, "cell_extractor.DetectionTool.GreedyPredictor.decision"]], "decision() (cell_extractor.detectiontool.predictor method)": [[1, "cell_extractor.DetectionTool.Predictor.decision"]], "detect_cell() (in module cell_extractor.celldetector)": [[1, "cell_extractor.CellDetector.detect_cell"]], "detect_cell_multithreshold() (in module cell_extractor.celldetector)": [[1, "cell_extractor.CellDetector.detect_cell_multithreshold"]], "determine_mixed_detection() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.determine_mixed_detection"]], "determine_pure_detection() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.determine_pure_detection"]], "equalize_array_size_by_trimming() (in module cell_extractor.compute_image_features)": [[1, "cell_extractor.compute_image_features.equalize_array_size_by_trimming"]], "features_using_center_connectd_components() (cell_extractor.featurefinder.featurefinder method)": [[1, "cell_extractor.FeatureFinder.FeatureFinder.features_using_center_connectd_components"]], "find_cloest_connected_segment_to_manual_label() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.find_cloest_connected_segment_to_manual_label"]], "find_connected_segments() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.find_connected_segments"]], "find_examples() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.find_examples"]], "find_segments_corresponding_to_manual_labels() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.find_segments_corresponding_to_manual_labels"]], "gen_scale() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.gen_scale"]], "get_all_sections() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_all_sections"]], "get_all_sections_for_animali() (in module cell_extractor.celldetectorio)": [[1, "cell_extractor.CellDetectorIO.get_all_sections_for_animali"]], "get_animals_with_detections() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_animals_with_detections"]], "get_animals_with_examples() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_animals_with_examples"]], "get_animals_with_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_animals_with_features"]], "get_available_animals() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_available_animals"]], "get_combined_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_combined_features"]], "get_combined_features_for_detection() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_combined_features_for_detection"]], "get_combined_features_of_train_sections() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_combined_features_of_train_sections"]], "get_detection_by_category() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_detection_by_category"]], "get_detection_results() (cell_extractor.celldetector.celldetector method)": [[1, "cell_extractor.CellDetector.CellDetector.get_detection_results"]], "get_detections_and_scores_for_all_threshold() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.get_detections_and_scores_for_all_threshold"]], "get_example_save_path() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_example_save_path"]], "get_examples() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.get_examples"]], "get_feature_save_path() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_feature_save_path"]], "get_manual_annotation_in_tilei() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_manual_annotation_in_tilei"]], "get_prediction() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.get_prediction"]], "get_qualifications() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_qualifications"]], "get_sections_with_annotation_for_animali() (in module cell_extractor.celldetectorio)": [[1, "cell_extractor.CellDetectorIO.get_sections_with_annotation_for_animali"]], "get_sections_with_csv() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_with_csv"]], "get_sections_with_example() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_with_example"]], "get_sections_with_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_with_features"]], "get_sections_with_string() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_with_string"]], "get_sections_without_annotation_for_animali() (in module cell_extractor.celldetectorio)": [[1, "cell_extractor.CellDetectorIO.get_sections_without_annotation_for_animali"]], "get_sections_without_csv() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_without_csv"]], "get_sections_without_example() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_without_example"]], "get_sections_without_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_without_features"]], "get_sections_without_string() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_sections_without_string"]], "get_sures() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.get_sures"]], "get_tile_and_image_dimensions() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_tile_and_image_dimensions"]], "get_tile_information() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_tile_information"]], "get_tile_origin() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.get_tile_origin"]], "get_tilei() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.get_tilei"]], "get_train_and_test() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.get_train_and_test"]], "get_unsures() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.get_unsures"]], "has_detection() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.has_detection"]], "init_parameter() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.init_parameter"]], "list_available_animals() (in module cell_extractor.celldetectorio)": [[1, "cell_extractor.CellDetectorIO.list_available_animals"]], "list_available_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.list_available_features"]], "list_detectors() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.list_detectors"]], "load_all_examples_in_brain() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_all_examples_in_brain"]], "load_and_preprocess_image() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.load_and_preprocess_image"]], "load_average_cell_image() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_average_cell_image"]], "load_detections() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.load_detections"]], "load_detections() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_detections"]], "load_detector() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_detector"]], "load_detector() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.load_detector"]], "load_examples() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_examples"]], "load_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_features"]], "load_manual_annotation() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.load_manual_annotation"]], "load_manual_labels_in_tilei() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.load_manual_labels_in_tilei"]], "load_models() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.load_models"]], "module": [[1, "module-cell_extractor"], [1, "module-cell_extractor.CellDetector"], [1, "module-cell_extractor.CellDetectorIO"], [1, "module-cell_extractor.CellDetectorTrainer"], [1, "module-cell_extractor.DetectionTool"], [1, "module-cell_extractor.ExampleFinder"], [1, "module-cell_extractor.FeatureFinder"], [1, "module-cell_extractor.MeanImageCalculator"], [1, "module-cell_extractor.compute_image_features"]], "parallel_process_all_sections() (in module cell_extractor.celldetectorio)": [[1, "cell_extractor.CellDetectorIO.parallel_process_all_sections"]], "plot_decision_scatter() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.plot_decision_scatter"]], "plot_detector_threshold() (cell_extractor.celldetector.multithresholddetector method)": [[1, "cell_extractor.CellDetector.MultiThresholdDetector.plot_detector_threshold"]], "plot_score_scatter() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.plot_score_scatter"]], "plotline() (cell_extractor.detectiontool.greedypredictor method)": [[1, "cell_extractor.DetectionTool.GreedyPredictor.plotline"]], "points2line() (cell_extractor.detectiontool.greedypredictor method)": [[1, "cell_extractor.DetectionTool.GreedyPredictor.points2line"]], "print_boundary_points() (cell_extractor.detectiontool.greedypredictor method)": [[1, "cell_extractor.DetectionTool.GreedyPredictor.print_boundary_points"]], "print_version() (cell_extractor.celldetector.celldetector method)": [[1, "cell_extractor.CellDetector.CellDetector.print_version"]], "report_detection_status() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.report_detection_status"]], "save_custom_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.save_custom_features"]], "save_detector() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.save_detector"]], "save_detector() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.save_detector"]], "save_examples() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.save_examples"]], "save_features() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.save_features"]], "save_models() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.save_models"]], "save_predictions() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.save_predictions"]], "save_tile_information() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.save_tile_information"]], "set_boundary_points() (cell_extractor.detectiontool.greedypredictor method)": [[1, "cell_extractor.DetectionTool.GreedyPredictor.set_boundary_points"]], "set_folder_paths() (cell_extractor.celldetectorio.celldetectorio method)": [[1, "cell_extractor.CellDetectorIO.CellDetectorIO.set_folder_paths"]], "set_plot_limits() (cell_extractor.detectiontool.detector method)": [[1, "cell_extractor.DetectionTool.Detector.set_plot_limits"]], "sobel() (in module cell_extractor.compute_image_features)": [[1, "cell_extractor.compute_image_features.sobel"]], "string_to_prediction() (in module cell_extractor.celldetector)": [[1, "cell_extractor.CellDetector.string_to_prediction"]], "subtract_blurred_image() (cell_extractor.examplefinder.examplefinder method)": [[1, "cell_extractor.ExampleFinder.ExampleFinder.subtract_blurred_image"]], "test_xgboost() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.test_xgboost"]], "test_xgboost_at_depthi() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.test_xgboost_at_depthi"]], "train_classifier() (cell_extractor.celldetectortrainer.celldetectortrainer method)": [[1, "cell_extractor.CellDetectorTrainer.CellDetectorTrainer.train_classifier"]], "trim_array_to_size() (in module cell_extractor.compute_image_features)": [[1, "cell_extractor.compute_image_features.trim_array_to_size"]]}})